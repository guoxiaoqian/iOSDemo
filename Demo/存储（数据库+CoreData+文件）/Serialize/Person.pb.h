// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Person.proto

#ifndef PROTOBUF_Person_2eproto__INCLUDED
#define PROTOBUF_Person_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Person_2eproto();
void protobuf_AssignDesc_Person_2eproto();
void protobuf_ShutdownFile_Person_2eproto();

class PBPerson;

// ===================================================================

class PBPerson : public ::google::protobuf::MessageLite {
 public:
  PBPerson();
  virtual ~PBPerson();

  PBPerson(const PBPerson& from);

  inline PBPerson& operator=(const PBPerson& from) {
    CopyFrom(from);
    return *this;
  }

  static const PBPerson& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PBPerson* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PBPerson* other);

  // implements Message ----------------------------------------------

  PBPerson* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PBPerson& from);
  void MergeFrom(const PBPerson& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 age = 2;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 2;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional string phone = 4;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // repeated .PBPerson children = 5;
  inline int children_size() const;
  inline void clear_children();
  static const int kChildrenFieldNumber = 5;
  inline const ::PBPerson& children(int index) const;
  inline ::PBPerson* mutable_children(int index);
  inline ::PBPerson* add_children();
  inline const ::google::protobuf::RepeatedPtrField< ::PBPerson >&
      children() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBPerson >*
      mutable_children();

  // @@protoc_insertion_point(class_scope:PBPerson)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_phone();
  inline void clear_has_phone();

  ::std::string* name_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 sex_;
  ::std::string* phone_;
  ::google::protobuf::RepeatedPtrField< ::PBPerson > children_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Person_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Person_2eproto();
  #endif
  friend void protobuf_AssignDesc_Person_2eproto();
  friend void protobuf_ShutdownFile_Person_2eproto();

  void InitAsDefaultInstance();
  static PBPerson* default_instance_;
};
// ===================================================================


// ===================================================================

// PBPerson

// required string name = 1;
inline bool PBPerson::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBPerson::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBPerson::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBPerson::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBPerson::name() const {
  return *name_;
}
inline void PBPerson::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBPerson::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBPerson::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBPerson::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBPerson::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBPerson::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 age = 2;
inline bool PBPerson::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBPerson::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBPerson::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBPerson::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 PBPerson::age() const {
  return age_;
}
inline void PBPerson::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
}

// optional int32 sex = 3;
inline bool PBPerson::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBPerson::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBPerson::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBPerson::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 PBPerson::sex() const {
  return sex_;
}
inline void PBPerson::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string phone = 4;
inline bool PBPerson::has_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBPerson::set_has_phone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBPerson::clear_has_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBPerson::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& PBPerson::phone() const {
  return *phone_;
}
inline void PBPerson::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void PBPerson::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void PBPerson::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBPerson::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* PBPerson::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBPerson::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .PBPerson children = 5;
inline int PBPerson::children_size() const {
  return children_.size();
}
inline void PBPerson::clear_children() {
  children_.Clear();
}
inline const ::PBPerson& PBPerson::children(int index) const {
  return children_.Get(index);
}
inline ::PBPerson* PBPerson::mutable_children(int index) {
  return children_.Mutable(index);
}
inline ::PBPerson* PBPerson::add_children() {
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBPerson >&
PBPerson::children() const {
  return children_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBPerson >*
PBPerson::mutable_children() {
  return &children_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Person_2eproto__INCLUDED
