// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Person.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Person.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

// ===================================================================

const google::protobuf::FieldInfo* PBPersonAttribute::GetFieldInfoArray(int& count) const{
    static const google::protobuf::FieldInfo __array[] = {
        {1, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonAttribute, key_),::google::protobuf::internal::WireFormatLite::TYPE_STRING, 0},
        {2, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonAttribute, value_),::google::protobuf::internal::WireFormatLite::TYPE_STRING, 0},
};
    count = sizeof(__array) / sizeof(google::protobuf::FieldInfo);
    return &__array[0];
}
PBPersonAttribute::PBPersonAttribute()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}
void PBPersonAttribute::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPersonAttribute::~PBPersonAttribute() {
  SharedDtor();
}

void PBPersonAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
PBPersonAttribute* PBPersonAttribute::New() const {
  return new PBPersonAttribute;
}







bool PBPersonAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}


::std::string PBPersonAttribute::GetTypeName() const {
  return "PBPersonAttribute";
}


// ===================================================================

const google::protobuf::FieldInfo* PBPerson::GetFieldInfoArray(int& count) const{
    static const google::protobuf::FieldInfo __array[] = {
        {1, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPerson, name_),::google::protobuf::internal::WireFormatLite::TYPE_STRING, 0},
        {2, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPerson, age_),::google::protobuf::internal::WireFormatLite::TYPE_INT32, 0},
        {3, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPerson, sex_),::google::protobuf::internal::WireFormatLite::TYPE_INT32, 0},
        {4, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPerson, phone_),::google::protobuf::internal::WireFormatLite::TYPE_STRING, 0},
        {5, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPerson, children_),::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 1},
        {6, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPerson, attributes_),::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 1},
};
    count = sizeof(__array) / sizeof(google::protobuf::FieldInfo);
    return &__array[0];
}
PBPerson::PBPerson()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}
void PBPerson::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  age_ = 0;
  sex_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPerson::~PBPerson() {
  SharedDtor();
}

void PBPerson::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
PBPerson* PBPerson::New() const {
  return new PBPerson;
}







bool PBPerson::IsInitialized() const {

  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  return true;
}


::std::string PBPerson::GetTypeName() const {
  return "PBPerson";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
